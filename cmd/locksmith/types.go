package locksmith

import (
	"crypto/rsa"
	"crypto/x509"
	"crypto/x509/pkix"
	"math/big"
	"net"
	"time"
)

/*====================================================================================================
  Application Types
====================================================================================================*/

// errorString is a trivial implementation of error.
type errorString struct {
	s string
}

func (e *errorString) Error() string {
	return e.s
}

// Config struct for webapp config
type Config struct {
	Locksmith ConfigYAML `yaml:"locksmith"`
}

// ConfigYAML is what is defined for this Locksmith server
type ConfigYAML struct {
	PKIRoot string `yaml:"pki_root"`
	Server  Server `yaml:"server"`
}

// Server configures the HTTP server
type Server struct {
	// Host is the local machine IP Address to bind the HTTP Server to
	Host string `yaml:"host"`

	BasePath string `yaml:"base_path"`

	// Port is the local machine TCP Port to bind the HTTP Server to
	Port    string `yaml:"port"`
	Timeout struct {
		// Server is the general server timeout to use
		// for graceful shutdowns
		Server time.Duration `yaml:"server"`

		// Write is the amount of time to wait until an HTTP server
		// write opperation is cancelled
		Write time.Duration `yaml:"write"`

		// Read is the amount of time to wait until an HTTP server
		// read operation is cancelled
		Read time.Duration `yaml:"read"`

		// Read is the amount of time to wait
		// until an IDLE HTTP session is closed
		Idle time.Duration `yaml:"idle"`
	} `yaml:"timeout"`
}

// CertificateAuthorityPaths returns all the default paths generated by a new CA
type CertificateAuthorityPaths struct {
	RootCAPath               string
	RootCACertRequestsPath   string
	RootCACertsPath          string
	RootCACertRevListPath    string
	RootCANewCertsPath       string
	RootCACertKeysPath       string
	RootCAIntermediateCAPath string
	RootCACertIndexFilePath  string
	RootCACertSerialFilePath string
	RootCACrlnumFilePath     string
}

/*====================================================================================================
  Shared x509 Types
====================================================================================================*/

// CertificateInformation gives a general read out of a certificate file
type CertificateInformation struct {
	CommonName     string `json:"common_name"`
	StartDate      string `json:"start_date"`
	ExpirationDate string `json:"expiration_date"`
}

// Counter for serial number
type Counter struct {
	count int64
}

/*
CertificateConfiguration is a struct to pass Certificate Config Information into the setup functions

`Subject` is a CertificateConfigurationSubject object

`ExpirationDate` is expressed as a slice of 3 ints [ years, months, days ] in the future

`RSAPrivateKey` is optional - this is used to sign a certificate request with an external key instead of one generated in the PKI

`RSAPrivateKeyPassphrase` is optional - this is used to secure the key if generated via PKI

`SANData` is a SANData object

`CertificateType` is a string representing what type of certificate is being requested or generated and is used in validation checks.  Options: server|client|authority|authority-no-subs
*/
type CertificateConfiguration struct {
	Subject                 CertificateConfigurationSubject `json:"subject"`
	ExpirationDate          []int                           `json:"expiration_date,omitempty"`
	RSAPrivateKey           string                          `json:"rsa_private_key,omitempty"`
	RSAPrivateKeyPassphrase string                          `json:"rsa_private_key_passphrase,omitempty"`
	SerialNumber            string                          `json:"serial_number,omitempty"`
	SANData                 SANData                         `json:"san_data,omitempty"`
	CertificateType         string                          `json:"certificate_type,omitempty"`
}

// CertificateConfigurationSubject is simply a redefinition of pkix.Name
type CertificateConfigurationSubject struct {
	CommonName         string   `json:"common_name"`
	Organization       []string `json:"organization"`
	OrganizationalUnit []string `json:"organizational_unit,omitempty"`
	Country            []string `json:"country,omitempty"`
	Province           []string `json:"province,omitempty"`
	Locality           []string `json:"locality,omitempty"`
	StreetAddress      []string `json:"street_address,omitempty"`
	PostalCode         []string `json:"postal_code,omitempty"`
}

// SANData provides a collection of SANData for a certificate
type SANData struct {
	IPAddresses    []net.IP `json:"ip_addresses,omitempty"`
	EmailAddresses []string `json:"email_addresses,omitempty"`
	DNSNames       []string `json:"dns_names,omitempty"`
	URIs           []string `json:"uris,omitempty"`
	//URIs           []*url.URL `json:"uris,omitempty"`
}

// basicConstraints is idk, something
type basicConstraints struct {
	IsCA       bool `asn1:"optional"`
	MaxPathLen int  `asn1:"optional,default:-1"`
}

// pkcs1PublicKey reflects the ASN.1 structure of a PKCS #1 public key.
type pkcs1PublicKey struct {
	N *big.Int
	E int
}

/*====================================================================================================
  API - General
====================================================================================================*/

// ReturnGenericMessage - Generic message
type ReturnGenericMessage struct {
	Status   string   `json:"status"`
	Errors   []string `json:"errors"`
	Messages []string `json:"messages"`
}

/*====================================================================================================
  API - Key Stores
====================================================================================================*/

// RESTGETKeyStoresJSONReturn handles the data returned by the GET /keystores endpoint for key store listings
type RESTGETKeyStoresJSONReturn struct {
	Status    string   `json:"status"`
	Errors    []string `json:"errors"`
	Messages  []string `json:"messages"`
	KeyStores []string `json:"key_stores,omitempty"`
}

// RESTPOSTKeyStoresJSONIn handles the data returned by the GET /keystores endpoint for key store listings
type RESTPOSTKeyStoresJSONIn struct {
	KeyStore string `json:"key_store_name"`
}

// RESTPOSTKeyStoresJSONReturn handles the data returned by the GET /keystores endpoint for key store listings
type RESTPOSTKeyStoresJSONReturn struct {
	Status   string   `json:"status"`
	Errors   []string `json:"errors"`
	Messages []string `json:"messages"`
	KeyStore string   `json:"key_store_id"`
}

/*====================================================================================================
  API - Key Pairs
====================================================================================================*/

// RESTGETKeyPairsJSONReturn handles the data returned by the GET /keys endpoint for key pair listings
type RESTGETKeyPairsJSONReturn struct {
	Status   string   `json:"status"`
	Errors   []string `json:"errors"`
	Messages []string `json:"messages"`
	KeyPairs []string `json:"key_pairs,omitempty"`
}

// RESTGETKeyPairJSONReturn handles the data returned by the GET /keys endpoint for specific key pair id data
type RESTGETKeyPairJSONReturn struct {
	Status   string   `json:"status"`
	Errors   []string `json:"errors"`
	Messages []string `json:"messages"`
	KeyPair  KeyPair  `json:"key_pair,omitempty"`
}

// KeyPair combines a string for a Public and Private Key Base64 PEM
type KeyPair struct {
	PublicKey  string `json:"public_key,omitempty"`
	PrivateKey string `json:"private_key,omitempty"`
}

// RealKeyPair combines a string for a Public and Private Key objects
type RealKeyPair struct {
	PublicKey  *rsa.PublicKey  `json:"public_key,omitempty"`
	PrivateKey *rsa.PrivateKey `json:"private_key,omitempty"`
}

// RESTPOSTNewKeyPairIn organizes the data required for creating a new Key Pair
type RESTPOSTNewKeyPairIn struct {
	KeyPairID       string `json:"key_pair_id"`
	KeyStoreID      string `json:"key_store_id,omitempty"`
	Passphrase      string `json:"passphrase,omitempty"`
	StorePrivateKey bool   `json:"store_private_key"`
}

// RESTPOSTNewKeyPairReturn handles the data returned by the POST /keys endpoint for generated key pairs
type RESTPOSTNewKeyPairReturn struct {
	Status    string   `json:"status"`
	Errors    []string `json:"errors"`
	Messages  []string `json:"messages"`
	KeyPair   KeyPair  `json:"key_pair,omitempty"`
	KeyPairID string   `json:"key_pair_id,omitempty"`
}

/*====================================================================================================
  API - Root CAs
====================================================================================================*/

// ReturnGetRoots - GET /roots, handles listing of root ca slugs
type ReturnGetRoots struct {
	Status   string   `json:"status"`
	Errors   []string `json:"errors"`
	Messages []string `json:"messages"`
	Roots    []string `json:"roots"`
}

// ReturnPostRoots - POST /roots, handles the returned data from creating a Root CA
type ReturnPostRoots struct {
	Status   string   `json:"status"`
	Errors   []string `json:"errors"`
	Messages []string `json:"messages"`
	Root     RootInfo `json:"root"`
}

// RootInfo provides general root informations
type RootInfo struct {
	Slug     string           `json:"slug"`
	Serial   string           `json:"next_serial"`
	CertInfo x509.Certificate `json:"certificate"`
}

// CAIndex provides the tab-delimited structure for CA Index files
type CAIndex struct {
	State             string
	EndDate           string
	DateOfRevokation  string
	Serial            string
	PathToCertificate string
	Subject           string
}

/*====================================================================================================
  API - Authority
====================================================================================================*/

// RESTGETAuthorityJSONReturn handles the data returned by the GET /authority endpoint
type RESTGETAuthorityJSONReturn struct {
	Status          string            `json:"status"`
	Errors          []string          `json:"errors"`
	Messages        []string          `json:"messages"`
	Slug            string            `json:"slug"`
	CertificatePEM  string            `json:"certificate_pem"`
	CertificateInfo *x509.Certificate `json:"certificate_information"`
}

/*====================================================================================================
  API - Intermediate CAs
====================================================================================================*/

// RESTGETIntermedCAJSONIn handles the data required by the GET /intermediates endpoint
type RESTGETIntermedCAJSONIn struct {
	CommonNamePath string `json:"cn_path,omitempty"`
	SlugPath       string `json:"slug_path,omitempty"`
}

// RESTGETIntermedCAJSONReturn handles the data returned by the GET /intermediates endpoint
type RESTGETIntermedCAJSONReturn struct {
	Status          string   `json:"status"`
	Errors          []string `json:"errors"`
	Messages        []string `json:"messages"`
	IntermediateCAs []string `json:"intermediate_certificate_authorities"`
}

// RESTPOSTIntermedCAJSONIn handles the data required by the POST /intermediates endpoint
type RESTPOSTIntermedCAJSONIn struct {
	CommonNamePath              string                   `json:"cn_path,omitempty"`
	SlugPath                    string                   `json:"slug_path,omitempty"`
	CertificateConfiguration    CertificateConfiguration `json:"certificate_config"`
	SigningPrivateKeyPassphrase string                   `json:"rsa_private_key_passphrase,omitempty"`
}

/*====================================================================================================
  API - Certificate Requests
====================================================================================================*/

// RESTGETCertificateRequestsJSONReturn handles the data returned by the GET /certificate-requests endpoint
type RESTGETCertificateRequestsJSONReturn struct {
	Status              string   `json:"status"`
	Errors              []string `json:"errors"`
	Messages            []string `json:"messages"`
	CertificateRequests []string `json:"certificate_requests"`
}

// RESTGETCertificateRequestJSONReturn handles the data returned by the GET /certificate-request endpoint
type RESTGETCertificateRequestJSONReturn struct {
	Status                string                   `json:"status"`
	Errors                []string                 `json:"errors"`
	Messages              []string                 `json:"messages"`
	CertificateRequestPEM string                   `json:"csr_pem"`
	CertificateRequest    *x509.CertificateRequest `json:"certificate_request"`
}

// RESTPOSTCertificateRequestJSONIn handles the data required by the POST /certificate-requests endpoint
type RESTPOSTCertificateRequestJSONIn struct {
	CommonNamePath              string                   `json:"cn_path,omitempty"`
	SlugPath                    string                   `json:"slug_path,omitempty"`
	CertificateConfiguration    CertificateConfiguration `json:"certificate_config"`
	SigningPrivateKeyPassphrase string                   `json:"rsa_private_key_passphrase,omitempty"`
}

// RESTPOSTCertificateRequestJSONReturn handles the data returned by the POST /certificate-requests endpoint
type RESTPOSTCertificateRequestJSONReturn struct {
	Status   string                 `json:"status"`
	Errors   []string               `json:"errors"`
	Messages []string               `json:"messages"`
	CSRInfo  CertificateRequestInfo `json:"csr_info"`
}

// CertificateRequestInfo provides general Certificate Request information
type CertificateRequestInfo struct {
	Slug               string                   `json:"slug"`
	CertificateRequest *x509.CertificateRequest `json:"certificate_request"`
	KeyPair            KeyPair                  `json:"key_pair,omitempty"`
}

/*====================================================================================================
  API - Certificates
====================================================================================================*/

// RESTGETCertificatesJSONReturn handles the data returned by the GET /certificates endpoint
type RESTGETCertificatesJSONReturn struct {
	Status       string   `json:"status"`
	Errors       []string `json:"errors"`
	Messages     []string `json:"messages"`
	Certificates []string `json:"certificates"`
}

// RESTGETCertificateInformationJSONReturn handles the data returned by the GET /certificate endpoint
type RESTGETCertificateInformationJSONReturn struct {
	Status          string            `json:"status"`
	Errors          []string          `json:"errors"`
	Messages        []string          `json:"messages"`
	Slug            string            `json:"slug"`
	CertificatePEM  string            `json:"certificate_pem"`
	CertificateInfo *x509.Certificate `json:"certificate_information"`
}

// RESTPOSTCertificateJSONIn handles the data required by the POST /certificate endpoint
type RESTPOSTCertificateJSONIn struct {
	CommonNamePath              string                   `json:"cn_path,omitempty"`
	SlugPath                    string                   `json:"slug_path,omitempty"`
	CertificateConfiguration    CertificateConfiguration `json:"certificate_config"`
	SigningPrivateKeyPassphrase string                   `json:"rsa_private_key_passphrase,omitempty"`
}

/*====================================================================================================
  API - Certificate Revocation Lists
====================================================================================================*/

// RESTGETRevocationListJSONReturn handles the data returned by the GET /authority endpoint
type RESTGETRevocationListJSONReturn struct {
	Status          string                `json:"status"`
	Errors          []string              `json:"errors"`
	Messages        []string              `json:"messages"`
	Slug            string                `json:"slug"`
	CertificatePEM  string                `json:"crl_pem"`
	CertificateList *pkix.CertificateList `json:"crl_list"`
}
